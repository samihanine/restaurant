generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum ItemType {
    DRINK
    SAUCE
    MENU
    REGULAR
}

enum OrderStatus {
    PENDING
    PREPARING
    READY
    DELIVERED
    CANCELED
}

enum OrderType {
    DELIVERY
    TAKEAWAY
    ONSPOT
}

enum Role {
    ROOT
    ADMIN
    EMPLOYEE
    CUSTOMER
}

model Settings {
    userId    String    @id @unique
    language  String
    deletedAt DateTime?
}

model Restaurants {
    id             String  @id @default(uuid())
    name           String
    companyName    String? @default("")
    address        String
    phone          String
    siretNumber    String
    tvaNumber      String
    latitude       Float
    longitude      Float
    userId         String
    primaryColor   String
    secondaryColor String
    menuId         String?

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    employees        Employees[]
    orders           Orders[]
    usersRestaurants UsersRestaurants[]
    menu             Menus?             @relation(fields: [menuId], references: [id], onDelete: SetNull)
}

model UsersRestaurants {
    id           String    @id @default(uuid())
    userId       String
    restaurantId String
    role         Role      @default(ADMIN)
    deletedAt    DateTime?
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt

    restaurant Restaurants @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Categories {
    id            String          @id @default(uuid())
    order         Int             @default(1)
    name          String
    color         String?         @default("")
    description   String?         @default("")
    menuId        String
    deletedAt     DateTime?
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    items         Items[]
    menu          Menus           @relation(fields: [menuId], references: [id], onDelete: Cascade)
    groupsOptions GroupsOptions[]
}

model Menus {
    id          String @id @default(uuid())
    name        String
    description String @default("")

    deletedAt  DateTime?
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt
    Items      Items[]
    restaurant Restaurants[]
    categories Categories[]
    groups     Groups[]
}

model Items {
    id          String    @id @default(uuid())
    name        String
    description String    @default("")
    price       Float     @default(0)
    outOfStock  Boolean   @default(false)
    promotion   Float     @default(0)
    groupId     String?
    isHidden    Boolean   @default(false)
    imageUrl    String?
    categoryId  String?
    menuId      String
    tvaPercent  Float     @default(10)
    deletedAt   DateTime?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    category Categories? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
    menu     Menus       @relation(fields: [menuId], references: [id], onDelete: Cascade)
    group    Groups?     @relation(fields: [groupId], references: [id], onDelete: SetNull)

    ordersItems OrdersItems[]
}

model Groups {
    id        String    @id @default(uuid())
    name      String
    menuId    String
    deletedAt DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    menu          Menus           @relation(fields: [menuId], references: [id], onDelete: Cascade)
    item          Items[]
    groupsOptions GroupsOptions[]
}

model GroupsOptions {
    id         String  @id @default(uuid())
    name       String
    categoryId String?
    groupId    String
    required   Boolean @default(false)
    multiple   Boolean @default(false)
    addonPrice Float?  @default(0)

    deletedAt DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    group    Groups      @relation(fields: [groupId], references: [id], onDelete: Cascade)
    category Categories? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Employees {
    id           String    @id @default(uuid())
    restaurantId String
    firstName    String
    lastName     String
    email        String
    deletedAt    DateTime?
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt

    restaurant Restaurants @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
    Orders     Orders[]
}

model Orders {
    id                String      @id @default(uuid())
    number            Int         @default(0)
    restaurantId      String
    status            OrderStatus @default(PENDING)
    employeeId        String?
    customerFirstName String?
    customerLastName  String?
    customerPhone     String?
    customerAddress   String?
    customerEmail     String?
    comment           String?
    type              OrderType   @default(ONSPOT)
    pdfBase64         String?
    cashTendered      Float       @default(0)
    createdAt         DateTime    @default(now())
    updatedAt         DateTime    @updatedAt
    deletedAt         DateTime?

    restaurant  Restaurants   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
    employee    Employees?    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
    ordersItems OrdersItems[]
}

model OrdersItems {
    id                String  @id @default(uuid())
    orderId           String
    itemId            String
    quantity          Int
    price             Float   @default(0)
    parentItemOrderId String?
    comment           String? @default("")

    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    deletedAt     DateTime?
    order         Orders        @relation(fields: [orderId], references: [id], onDelete: Cascade)
    item          Items         @relation(fields: [itemId], references: [id], onDelete: Cascade)
    parentItem    OrdersItems?  @relation("ParentItem", fields: [parentItemOrderId], references: [id], onDelete: Cascade)
    childrenItems OrdersItems[] @relation("ParentItem")
}
