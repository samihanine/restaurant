generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum ItemType {
    DRINK
    SAUCE
    MENU
    REGULAR
}

enum OrderStatus {
    ACCEPTED
    PREPARING
    READY
    DELIVERED
    CANCELED
}

enum OrderType {
    DELIVERY
    TAKEAWAY
    ONSPOT
}

model Settings {
    userId    String    @id @unique
    language  String
    deletedAt DateTime?
}

model Restaurants {
    id             String @id @default(uuid())
    name           String
    address        String
    phone          String
    siretNumber    String
    tvaNumber      String
    latitude       Float
    longitude      Float
    userId         String
    primaryColor   String
    secondaryColor String

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    categories       Categories[]
    employees        Employees[]
    orders           Orders[]
    usersRestaurants UsersRestaurants[]
}

model UsersRestaurants {
    id           String    @id @default(uuid())
    userId       String
    restaurantId String
    role         String    @default("admin")
    deletedAt    DateTime?
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt

    restaurant Restaurants @relation(fields: [restaurantId], references: [id])
}

model Categories {
    id           String      @id @default(uuid())
    order        Int         @default(1)
    name         String
    color        String
    description  String
    restaurantId String
    deletedAt    DateTime?
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
    items        Items[]
    restaurant   Restaurants @relation(fields: [restaurantId], references: [id])
}

model Items {
    id           String     @id @default(uuid())
    name         String
    description  String     @default("")
    price        Float      @default(0)
    outOfStock   Boolean    @default(false)
    promotion    Float      @default(0)
    type         ItemType   @default(REGULAR)
    isHidden     Boolean    @default(false)
    imageUrl     String     @default("https://static.vecteezy.com/system/resources/previews/003/170/825/original/isolated-food-plate-fork-and-spoon-design-free-vector.jpg")
    categoryId   String
    restaurantId String
    deletedAt    DateTime?
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    category     Categories @relation(fields: [categoryId], references: [id])

    ordersItems OrdersItems[]
}

model Employees {
    id           String    @id @default(uuid())
    restaurantId String
    firstName    String
    lastName     String
    email        String
    deletedAt    DateTime?
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt

    restaurant Restaurants @relation(fields: [restaurantId], references: [id])
    Orders     Orders[]
}

model Orders {
    id                String      @id @default(uuid())
    restaurantId      String
    status            OrderStatus @default(ACCEPTED)
    employeeId        String?
    customerFirstName String?
    customerLastName  String?
    customerPhone     String?
    customerAddress   String?
    customerEmail     String?
    type              OrderType   @default(ONSPOT)
    createdAt         DateTime    @default(now())
    updatedAt         DateTime    @updatedAt
    deletedAt         DateTime?

    restaurant  Restaurants   @relation(fields: [restaurantId], references: [id])
    employee    Employees?    @relation(fields: [employeeId], references: [id])
    ordersItems OrdersItems[]
}

model OrdersItems {
    id                String  @id @default(uuid())
    orderId           String
    itemId            String
    quantity          Int
    price             Float   @default(0)
    parentItemOrderId String?

    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    deletedAt     DateTime?
    order         Orders        @relation(fields: [orderId], references: [id])
    item          Items         @relation(fields: [itemId], references: [id])
    parentItem    OrdersItems?  @relation("ParentItem", fields: [parentItemOrderId], references: [id])
    childrenItems OrdersItems[] @relation("ParentItem")
}
